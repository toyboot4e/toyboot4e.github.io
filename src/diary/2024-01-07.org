#+TITLE: ABC 335, PBT 本
#+DATE: <2024-01-07 Sun>

* 競技プログラミング

** 訓練

青 diff の AC 数が 50 を超えた。自力で解ける気配は無い。

[[https://www.google.com/search?q=%E3%83%9E%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%BB%E3%82%AA%E3%83%96%E3%83%BB%E5%A0%B4%E5%90%88%E3%81%AE%E6%95%B0][マスター・オブ・場合の数]] の §1 を解いた。意外と DP の観点が役立つ。

** ABC 335

[[https://atcoder.jp/contests/abc335][ABC 335]] に参加した。 4 完だった。

*** 感想

今回も手続き型言語 Haskell でゴリ押ししてしまった。

茶 diff の C, D が難しかった。来週は緑色コーダーに戻るかもしれない。

*** 解法

[[https://atcoder.jp/contests/abc335/tasks/abc335_a][A 問題]] では =(`snoc` '4')= とか =(<> "4")= が書けたら格好良かった。

[[https://atcoder.jp/contests/abc335/tasks/abc335_b][B 問題]] は =nubSort $ 全探索= の形で解いた。タイピングが苦手なので、空白区切りの =putStrLn= をスニペットに入れようと思った。

[[https://atcoder.jp/contests/abc335/tasks/abc335_c][C 問題]] ではスネークゲームを連想して混乱した。先頭の残像の位置が問われると思えば、可変配列をリングバッファとして使ったり、 =cojna/iota= の =Data.Buffer= に =pushBack= していけば良かった。

より上手な解答として可変配列を使わない提出が見れた。 =scanl= で位置の一覧を作ってから、改めてクエリに答えていくみたい。頭を使う必要があって難度は上がると思う。

[[https://atcoder.jp/contests/abc335/tasks/abc335_d][D 問題]] では螺旋状に答えを作っていけば良いことが分かった。内周がこれ:

#+BEGIN_SRC txt
 --|
 |T|
 |--
#+END_SRC

1 つ外側の周がこれ:

#+BEGIN_SRC txt
----|
|   |
| T |
|   |
|----
#+END_SRC

それぞれの周を描くためには、左上の頂点からスタートし、長さ $2 i$ の辺を 4 回描いた。 =accumArray= などは使わず、可変配列へ都度答えを書き込んだ。

別解としては、外周から始めて内周へと近づいていけば、壁 or 探索済みのセルにぶつかる度に 90 度回転するだけで済むため、簡単になりそう。

[[https://atcoder.jp/contests/abc335/tasks/abc335_e][E 問題]] は苦手なグラフ問題に見えて飛ばした。最長距離を求める不思議な問題だった。

コンテスト後に Dijkstra や 01-BFS っぽいのを投げてみたものの TLE 。もともと最短経路を求めるアルゴリズムだし、やっぱり上手く行かないみたい。同じ数が振られた隣接頂点を 1 つに潰すと DAG になり、 DP で解けるそう。後でやってみる。

[[https://atcoder.jp/contests/abc335/tasks/abc335_f][F 問題]] が解けなかった。右端から計算する方針は立てたものの、高速化ができなかった。 [[https://www.youtube.com/watch?v=cJiP8-Mq1jI&t=199s][evima さんの解法]] に従って $dp[x][i \bmod x]$ を周期和とすることで upsolve できた。力こそパワー……

* 読書: PBT 本

[[https://www.lambdanote.com/collections/proper-erlang-elixir][実践プロパティベーステスト]] を 28% まで読んだ。ジェネレータが生成したテストケースを分類し、何 % のテストがどの分類にあたるかを確認できることを知った。

実際、ランダムなテストケースを作るだけでは、境界値を見れず素通りする確率が高い。 AtCoder における QuickCheck の使い方としては、実質的に総当たりをしていた。自分でループを書いても良いが、失敗したケースの表示まで QuickCheck がやってくれる点が便利だった。

PBT 自体の良さはまだ感じ取れていない。 [[https://matklad.github.io/2023/10/06/what-is-an-invariant.html][matklad 氏が invariant 大好きマンなので]] 、彼の視点を理解するためにも読み進めてみたい。

