#+TITLE: ABC 368, Splay tree (2), SWAG
#+DATE: <2024-08-25 Sun>

* ABC 368

[[https://atcoder.jp/contests/abc368][ABC 368]] に参加しました。

#+CAPTION: Diff 予想
| 問題 | A 問題 | B 問題 | C 問題 | D 問題 | E 問題 | F 問題 |
|-----+-------+-------+-------+-------+-------+-------|
| 予想 |     10 |    200 | 1,100  | 1,000  | 1,400  | 1,600  |
| 実際 |     20 |     56 | 368    | 816    | 2,140  | 1,180  |

** =oj= が動かない……？

確認中です。

#+BEGIN_DETAILS エラーログ
#+BEGIN_SRC txt
abc368/contest.acc.json created.
create project of Hitachi Vantara Programming Contest 2024（AtCoder Beginner Contest 368）
node:events:497
      throw er; // Unhandled 'error' event
      ^

Error: spawn /nix/store/q8gf4f7373l92a5sd472mbxqci1d1v20-python3.11-online-judge-tools-12.0.0/bin/oj ENOENT
    at ChildProcess._handle.onexit (node:internal/child_process:286:19)
    at onErrorNT (node:internal/child_process:484:16)
    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)
Emitted 'error' event on ChildProcess instance at:
    at ChildProcess._handle.onexit (node:internal/child_process:292:12)
    at onErrorNT (node:internal/child_process:484:16)
    at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {
  errno: -2,
  code: 'ENOENT',
  syscall: 'spawn /nix/store/q8gf4f7373l92a5sd472mbxqci1d1v20-python3.11-online-judge-tools-12.0.0/bin/oj',
  path: '/nix/store/q8gf4f7373l92a5sd472mbxqci1d1v20-python3.11-online-judge-tools-12.0.0/bin/oj',
  spawnargs: [
    'dl',
    'https://atcoder.jp/contests/abc368/tasks/abc368_a',
    '-d',
    'test-cases'
  ]
}

Node.js v20.15.1
#+END_SRC
#+END_DETAILS

** [[https://atcoder.jp/contests/abc368/tasks/abc368_a][A 問題]]

リストを =splitAt (n - k)= して入れ替えます。

#+BEGIN_SRC hs
main=interact$unwords.f.words;f(n:k:x)=(++).snd<*>fst$splitAt(read n-read k)x
#+END_SRC

** [[https://atcoder.jp/contests/abc368/tasks/abc368_b][B 問題]]

Mutable にシミュレーションで解きました。序盤からオセロットですが、オセロットしたくて Haskell を使っていることもあり、苦渋の決断を踏み切りました。

#+CAPTION: リロードタイムがこんなにも戦場に息吹を！
#+BEGIN_SRC hs
res <- (`execStateT` (0 :: Int)) $ fix $ \loop -> do
  -- 操作完了まで繰り返し
  unlessM isDone $ do
    run
    modify' succ
    loop
#+END_SRC

** [[https://atcoder.jp/contests/abc368/tasks/abc368_c][C 問題]]

40 分苦戦しました。素直にループを書きましょう……！

** [[https://atcoder.jp/contests/abc368/tasks/abc368_d][D 問題]]

次数 1 の頂点を消して行きます。 cojna さんの [[https://github.com/cojna/iota/blob/e77bb3087f8a5231d0ae1320d93fd2649de37149/src/Data/Heap/Binary.hs][Binary Heap]] をお借りしました。

コードはぐちゃぐちゃになりましたが、手グセを持っていて助かりました。やはり手続き型プログラミングが楽ですね……。

#+CAPTION: ヒープが空になるまでループする
#+BEGIN_SRC hs
fix $ \loop -> do
  whenJustM (deleteBH heap) $ \x -> do
    {- ~~ -}
#+END_SRC

** [[https://atcoder.jp/contests/abc368/tasks/abc368_e][E 問題]]

hogeeee

** [[https://atcoder.jp/contests/abc368/tasks/abc368_f][F 問題]]

hogeeee

* Splay tree (2)

** Splay tree とは何者なのか

*** No: =SplayMap=

[[./2024-07-14.html#Splay tree][以前]] は map としての splay tree を作りました。しかし top-down splaying で集約の計算ができず、単なるマップになったのでした。欲しいやつじゃなかった……！

*** Yes: =SplaySeq= (遅延伝播反転可能 splay tree)

今回は列 (sequence) としての splay tree を作りました。 [[https://github.com/maspypy/library/blob/f05f893635f7855c3bb268435a0b7c3f9b84ae9c/ds/splaytree/splaytree.hpp][maspy さんの =splaytree.hpp=]] を写経します。列を木にすると、親が子の集約 (畳み込み) を持つことができます:

#+ATTR_HTML: :width 600px
[[./img/2024-08-25-sequence.png]]

セグメント木との主な違いとしては、要素の挿入・削除ができ、区間反転ができます。出ないと思いますが、部分木の入れ替えなども可能です。

区間反転は左右の子を貪欲に swap して実装できます。また可換モノイドの畳み込みは反転の影響を受けないため、反転の反映は遅延させます。

** verify

- [X] [[https://judge.yosupo.jp/problem/range_reverse_range_sum][Range Reverse Range Sum]]
- [X] [[https://judge.yosupo.jp/problem/dynamic_sequence_range_affine_range_sum][Dynamic Sequence Range Affine Range Sum]]

** 余談

- [[https://nyaannyaan.github.io/library/rbst/lazy-reversible-rbst.hpp.html][遅延伝搬反転可能乱択平衡二分木]]
  このような強い平衡木の実装としては、競プロの文脈では RBST が人気のようです。和名のカッコよさも一役買っている気がします。また RBST, splay tree に限らず AVL 木のようなメジャーな木でも実現できそうです。

- 直近の [[https://judge.yosupo.jp/submission/230376][Nachia さんの提出]]
  Top-down splaying で同等の機能を実現されていました。集約の計算をどう実装されたのか気になります。

- ★ [[https://qiita.com/NokonoKotlin/items/c108a603622c03c4c67b][自作 Set ライブラリ提供 : C++ の std::set が残念な件]]
  列としての splay tree に map としての機能を詰め込み、特に =MultiSet= にすると良いぞという記事です。 kth min までの畳み込みができます。これは真似してみたいです。

* SWAG (sliding window aggregation)

SWAG は簡単かつマイナ過ぎて解説が少ない気がします。

** Stack ベースの SWAG

尺取り方でモノイドの畳み込みを償却 $O(1)$ で求めるためのデータ構造 (?) です。群ではなく、逆操作が存在しない点がポイントです。双対右スキャンで壁を作って pop に備えます。

#+BEGIN_SRC txt
　　　　　　　配列  [1]-[2]-[3]-[4]-[5]-[6]-[7]-[8]-..
　　　　　　　　窓  [---------------------]
　　　　　バッファ                  [5]-[6]
バッファの畳み込み                  *******
　　双対右スキャン  <--------------
#+END_SRC

双対右スキャンとは、右から作る左畳み込み (=scanr' (flip (<>)) mempty=) です。造語だったらすみません。

この図において各操作の内容は、

- =fold=
  双対右スキャンの左端 (=<--=) の値 $\diamond$ バッファの畳込み
- =pushBack=
  バッファに値 =[7]= を追加し、バッファの畳み込みを更新する
- =popFront=
  双対右スキャンの左端 (=<--=) の値を削除する (※)

※ =popFront= で双対右スキャンが空になったとき、バッファ中の値を双対右スキャンへ移動します。よって償却 $O(1)$ です。

** Deque ベースの swag

push/pop を左右から操作可能にします。これは左右方向にスタックとスキャンを持てば良いです。

#+BEGIN_SRC txt
　　　　　右窓                ------------->
　　左スキャン                ------------->
　　　　　左窓  <-----------
双対右スキャン  <-----------
#+END_SRC

もう pop できない時は、要素を左右均等に振り分けてバランスをとります。これで償却 $O(1)$ になるみたいです。未証明……

** verify

- [[https://judge.yosupo.jp/problem/q][Queue Operate All Composite]]
  [[https://judge.yosupo.jp/submission/230684][187 ms]]. Stack 版 SWAG です。 Deque 版で解くと [[https://judge.yosupo.jp/submission/230775][219 ms]] でした。 Deque でいいか……

- [[https://judge.yosupo.jp/problem/deque_operate_all_composite][Deque Operate All Composite]]
  [[https://judge.yosupo.jp/submission/230774][220 ms]]. Deque 版 SWAG です。

** セグ木で $O(N \log N)$ で良くない？

セグ木で十分だと思いました。競プロ小説を書くなら主人公は SegTree です。

* Misc

- [[https://github.com/haskell/vector/pull/498][nextPermutation 最適化]]
  gksato さんの PR で =MVector= の =nextPermutation= が 10 倍以上速くなりました！　アルゴリズムの改善が渋いですね。言語アップデートまではコピーしてお借りします。

- [[https://www.youtube.com/channel/UCdBzzKmLiLFrQOBqLQtw_Qw][宮崎雄也と音楽の話]] が登録者 8,000 人
  すごい勢いです。この間まで 300 人でしたが？！

- [[https://fleshgodapocalypse.bandcamp.com/album/opera][Fleshgod Apocalypse の新譜]] が出ました
  90 秒聴くにはいい感じなんですが……。
