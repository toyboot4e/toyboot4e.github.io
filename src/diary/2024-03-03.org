#+TITLE: ABC 343 / 16 キー操作
#+DATE: <2024-03-03 Sun>

* ABC 343

[[https://atcoder.jp/contests/abc343][ABC 343]] に参加しました。 4 完 (A ~ D) でした。

** [[https://atcoder.jp/contests/abc343/tasks/abc343_a][A 問題]]

問題文を素直にコードに落としました:

#+BEGIN_SRC hs
main :: IO ()
main = do
  (!a, !b) <- ints2
  print . head . filter (/= a + b) $ [0 .. 9]
#+END_SRC

** [[https://atcoder.jp/contests/abc343/tasks/abc343_b][B 問題]]

グリッドを =V.Vector (U.Vector Int)= の形で読むと各行処理がしやすいです。 =findIndices= を使ってスマートに解答できました:

#+BEGIN_SRC hs
main :: IO ()
main = do
  !n <- ints1
  !xs <- V.replicateM n intsU
  V.forM_ xs $ \vec ->
    putLnBSB . unwordsBSB . U.map succ $ U.findIndices (== 1) vec
#+END_SRC

** [[https://atcoder.jp/contests/abc343/tasks/abc343_c][C 問題]]

$x^3$ が回文であるか判定します。回文の判定においては、文字列として比較するか、 10 進数の各桁に分解して比較することができます。

** [[https://atcoder.jp/contests/abc343/tasks/abc343_d][D 問題]]

[[https://cpprefjp.github.io/reference/set/multiset.html][multiset]] に対応するデータ型を持っていると楽できます。ハイライト:

#+BEGIN_SRC diff-hs
main :: IO ()
main = do
  (!n, !t) <- ints2
  !iws0 <- U.replicateM t (first pred <$> ints2)

  let !ms0 = (1, IM.singleton 0 n)
  !ws <- UM.replicate n (0 :: Int)
  (\f -> U.foldM'_ f ms0 iws0) $ \ms (!i, !dw) -> do
+    !w <- UM.read ws i
+    UM.write ws i (w + dw)
+    let ms' = (incMS (w + dw) . decMS w) ms
    print $ fst ms'
    return ms'
#+END_SRC

=Mutliset= の [[https://github.com/toyboot4e/toy-lib/blob/main/src/Data/MultiSet.hs][僕の実装はこれ]] です。

** [[https://atcoder.jp/contests/abc343/tasks/abc343_e][E 問題]]

小学校でやったような 3 集合のベン図を書くのですが、実装がバグっていてダメでした。

** [[https://atcoder.jp/contests/abc343/tasks/abc343_f][F 問題]]

平方分割を試みました。実装が間に合わず、 upsolve しようにも TLE して完敗です。

- [[https://atcoder.jp/contests/abc343/submissions/50845371][tanakh さんの提出 (1,775 ms)]]
- [[https://atcoder.jp/contests/abc343/submissions/50837854][ゼットさんの提出 (=1,994 ms)]]

** その他メモ

- [[https://hackage.haskell.org/package/primitive-0.9.0.0/docs/Control-Monad-Primitive.html][PrimMonad]] は『 =IO= または =ST= 』 よりもちょっと便利
  たとえば =StateT s IO= に =PrimMonad= が実装されているため、 =liftIO= を書かずに済みます。同様に、 =STRef= や =IORef= よりも [[https://hackage.haskell.org/package/primitive-0.9.0.0/docs/Data-Primitive-MutVar.html][MutVar]] の方が少し便利です。

- =Heap= vs =IntSet=
  =Heap= においてはキーが重複した要素も格納できます。

- =IntSet= の高速な 2 分割
  [[https://www.stackage.org/haddock/lts-21.6/containers-0.6.7/Data-IntSet.html#v:spanAntitone][spanAntitone]] を知りました。

* キーボード操作

キー数を減らす方向に舵を切って情報収集しています。

** 34 キー操作

Keyball 44 を 34 キーで操作するようになりました。 34 はかなり余裕のあるキー数で (そんな馬鹿な) 、余るキーも多いです。

34 キーの代表的なキーボードは [[https://github.com/davidphilipbarr/Sweep][Sweep]] です。操作は柔軟で見栄えも良く、この辺りがエンドゲームかと思います。キーボード界の =i3= かもです。

34 キーでは装飾キーの数が足りないため、 Tap-Hold によって装飾キーを入力します。これはファームウェアの機能です。

** 16 キー操作

*** ファームウェアの主な機能

16 キー操作を理解するため、 [[https://zmk.dev/docs/development/documentation][ZMK ファームウェア]] の一部機能をメモしました。

**** [[https://zmk.dev/docs/behaviors/layers][Layers]]

レイアウトを切り替える機能です。切り替え方式は主に 3 つです。

1. トグル
2. ホールドしている間のみ
3. 入力後、次の 1 キーのみ (スマホの Shift キー相当)

**** [[https://zmk.dev/docs/features/combos][Combos]]

複数キーの同時押しを別キーとして解釈する機能です。

#+BEGIN_QUOTE
Ben Vallack 氏は combo のファンでは無いらしく、複数キーを素早く入力 (rolling) したときに誤作動すると述べていました。
#+END_QUOTE

**** [[https://zmk.dev/docs/behaviors/hold-tap][Hold-Tap]]

長押しを別キーとして解釈する機能です。 Hold/Tap の優先度を調整できるっぽいです。

*** Piano (Ben Vallack)

事前知識を蓄えたところで、 Ben Vallack 氏の [[https://www.youtube.com/watch?v=5RN_4PQ0j1A][Has Your Keyboard Got Too Many Keys?]] を観ました。 16 キーのキーボード操作を、レイヤ切り替えのみで (combo 無しで) 実現しています。

**** Home-Row Mods

[[https://precondition.github.io/home-row-mods][A guide to home row mods]]

ASDFGHJKL といった home ポジションの row キーの長押しを modifier キーとして解釈する方式です。 Piano も同様に、キーの長押しで装飾キーの入力やレイヤ切り替えができます。

**** レイヤ切り替え

主にスマホのシフトキー相当のレイヤ切り替えを行っています。たとえば左手キーの長押しで記号レイヤに入り、右手で記号を入力すると、元のレイヤに戻ってきます。このように、主に *2 回の打鍵で 1 つのキーを入力する* のが Ben Vallack 式だと理解しました。

[[https://youtu.be/5RN_4PQ0j1A?si=Oi9f-ieUHe8Fn5SG&t=731][レイヤ切り替えが見れる部分 (12:11)]]

**** 装飾キーを押せるのか？

装飾キーは、ほぼレイヤ 1 にしか無いようです。他のレイヤのキーに装飾キーを付与する方法が気になります。

- 実は他のレイヤでも hold が装飾キーになる？
- 装飾キーもロックされる (スマホの shift キー相当) ？

** 8 キー操作

[[https://artsey.io/][ARTSEY (artsey.io)]] は combo (複数キーの同時押し) を活かして 8 キーによる入力を実現しています。僕が隻腕になったら、フリック入力の次にこれを試すと思います。

[[https://www.youtube.com/watch?v=dicYf7OiS3Q][Introduction: ARTSEY One Handed Keyboard - Youtube]]

** まとめ

34 キー操作を習得し、 16 キー操作 (Piano), 8 キー操作 (ARTSEY) をざっと見ました。未知の部分が小さくなり、そこそこ満足しました。 16 キー操作は自分でも試してみたいかもです。

* Misc

** MiniAxe

[[https://kagizaraya.jp/en/products/miniaxe][MiniAxe]] の基盤を破壊してしまいました。今年一番落ち込みました。

今後は先に基盤にハンダを塗ることにします。再注文しました。

