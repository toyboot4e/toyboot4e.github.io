#+TITLE: Fortran, 難し過ぎる
#+DATE: <2024-12-19 Thu>

[[https://qiita.com/advent-calendar/2024/fortran][Fortran Advent Calendar 2024]] の 19 日目の記事です。 Fortran 入門の三歩手前ぐらいの内容です。

* 背景

** モチベーション

競プロ界で Fortran を代表する人類に [[https://atcoder.jp/users/MrTired][MrTired]] がいます。彼／彼女の提出プログラムの頭には『[[https://github.com/osada-yum/Fortran_competitive_library/blob/fe03a1841bc1223db955efc0d7ea1a29aaeb36ce/src/special.fypp#L7][ランダムウォーク猿]]』を始めとした乱数キャラが登場したり、さり気なく Discord で僕の懸念事項を質問してくれたりと、ユーモラスで素敵な方です。好きだ！

すべての言語を使いこなしたい、という意味で僕は Fortran に興味がありますが、ちゃんと MrTired のコードを読んだり、もう少しお近づきしたいなー、という気持ちもあって、普通の人よりはモチベーションが高いと思います。

** やったみたこと

興味はありつつも、 Fortran 入門には二の足を踏んでいます。 [[https://www.unp.or.jp/ISBN/ISBN978-4-8158-1087-0.html][みんなの Fortran]] を購入して読んでいなかったり、 Emacs の環境構築をしたり、

#+CAPTION: Emacs
#+ATTR_HTML: :width 405dpx
[[./img/2024-12-19-emacs.png]]

[[https://atcoder.jp/contests/abs/tasks/abc086_a?lang=ja][AtCoder の一番簡単な問題]] を解いてみましたが、その後の進捗がありません。エアプで良いので、もう少し理解を進める手立ては無いものでしょうか？

#+CAPTION: 書いてみたプログラム
#+BEGIN_SRC fortran
program ABC086A
    use, intrinsic :: iso_fortran_env
    implicit none

    integer(int64) :: a, b
    read (input_unit, *) a, b

    if (mod(a*b, 2_int64) == 0_int64) then
        write (output_unit, '(A)') 'Even'
    else
        write (output_unit, '(A)') 'Odd'
    end if
end program ABC086A
#+END_SRC

* Fortran 学習へのアプローチ……の検討

Fortran の学習曲線が急なのは間違い無いと思います。学習過程なので寛容に捉えて欲しいのですが、僕は以下の辺りに引っかかっています。

** 構文の難しさ

プログラム全体の構造がなかなか頭に定着しません。歴史的経緯が色々ありそうです。

#+BEGIN_SRC fortran
program ABC086A
    use, intrinsic :: iso_fortran_env ! (ref:1)
    implicit none
    ! ~~
end program ABC086A
#+END_SRC

- [[(1)]]: 特殊な構文に見えてしまうが、 =#pragma= 的な一律の記法であって欲しい？

変数の宣言もなんだかピンと来ません。

#+BEGIN_SRC fortran
integer(int64) :: a, b ! (ref:2)
#+END_SRC

- [[(2)]] どうして =::= なんだろう

標準入出力も構文が謎です。関数呼び出しの普遍的な構文ではなく、 read/write 文の専用構文が用意されている雰囲気があります。どうして関数呼び出しじゃないんだ！　と悩んでいる間は集中力 50% 減です。これが慣れない言語の難しさですね。

#+BEGIN_SRC fortran
read (input_unit, *) a, b ! (ref:3)
write (output_unit, '(A)') 'Even' ! (ref:4)
#+END_SRC

- [[(3)]] なぜ =(unit, format)= なのか……？
- [[(4)]] =(A)= って何だ……！

そして文字列が出てくるとノックアウトされます。

#+BEGIN_SRC fortran
character(len=3) :: s ! (ref:5)
#+END_SRC

- [[(5)]] =len= の出自が不明…… (コンストラクタの構文だったりする？)

Fortran の revision によって関数や変数の型が変わるっぽいのも難しい。 Fortran 2018 では =mod= 関数の 2 引数の /type/ と /kind/ がマッチする必要があります。たぶん。要は型が一致する必要があります。

#+BEGIN_SRC fortran
mod(4_int64, 2_int32) ! コンパイルエラー=! コンパイルエラー
mod(4_int64, 2_int64) ! OK
#+END_SRC

ところで比較は型が合っていなくても良さそうです。どうしてここではキャストを共要しないのか……？！

#+BEGIN_SRC fortran
mod(4_int64, 2_int64) == 0_int32
#+END_SRC

いずれも僕の練習不足を表すもので、 50 時間ぐらい Fortran を書けばあっさり慣れると思いますが、今はあぐらをかいたまま前に進みたい。そこで思いつきました。 AST だ！

** AST を見てみよう

[[https://docs.lfortran.org/en/design/][LFortran Design]] を覗いてみると、 AST に言及があります。 AST は単純に文法をパースしたものらしいので、これを見れば一通り文法を把握できるはずです。

[[https://github.com/lfortran/lfortran/blob/5ebf07740600ccdbeeab8db143f1bb0f320a0f7a/grammar/AST.asdl][AST.asdl]] にて文法が定義されており、これを元に =<lfortran/ast.h>= を生成できます。

#+CAPTION: =ast.h= を生成する
#+BEGIN_SRC sh
$ python src/libasr/asdl_cpp.py grammar/AST.asdl src/lfortran/ast.h
#+END_SRC

まあでも =.asdl= の方が分かりやすそうです。 [[https://github.com/lfortran/lfortran/blob/5ebf07740600ccdbeeab8db143f1bb0f320a0f7a/grammar/AST.asdl][AST.asdl]] から一部抜粋すると、 read/write 文の文法が記載されています。

#+BEGIN_SRC asdl
stmt
    = ..
    | Read(int label, expr? format, argstar* args,
            kw_argstar* kwargs, expr* values, trivia? trivia)
      ..
    | Write(int label, argstar* args, kw_argstar* kwargs, expr* values, trivia? trivia)
      ..
#+END_SRC

この文法があの read/write には見えません。特に文法中に =()= の記載がありません。

#+BEGIN_SRC fortran
read (input_unit, *) a, b
write (output_unit, '(A)') 'Even'
#+END_SRC

ということは、 AST の構築時に =()= の情報が失われている可能性があります。 CST (concrete syntax tree) ではなかったか……！　ソース文字列に変換するコードを覗いてみましょう。

#+CAPTION: =ast_to_src.cpp=
#+BEGIN_SRC fortran
    void visit_GenericRead(const GenericRead_t &x) {
        std::string r;
        r += syn(gr::String);
        r.append("generic");
        r += syn();
        if(x.n_attr > 0 && x.m_attr[0] != nullptr){
            r += ", ";
            this->visit_decl_attribute(*x.m_attr[0]);
            r.append(s);
        }
        r += " :: ";
        r += "read("; ! (ref:1)
        r.append(x.m_id);
        r += ")";
        r += " => ";
        for (size_t i=0; i<x.n_names; i++) {
            r.append(x.m_names[i]);
            if (i < x.n_names-1) r.append(", ");
        }
        if(x.m_trivia){
            r += print_trivia_after(*x.m_trivia);
        } else {
            r.append("\n");
        }
        s = r;
    }
#+END_SRC

- [[(1)]] ああー、 =read( .. )= だ……

というわけで、 AST を見てもあまり文法を一望できませんでした。

* まとめ

Fortran 難しい難しい言いながら LFortran の AST を見てみました。今回は空振りでしたが、次に Fortran にアプローチするときは、 LFortran のパーサを見てみようかと思います。パーサを見れば文法が分かるでしょう。

Fortran Advelnt Calender 19 日目の記事でした〜。明日の記事は、 [[https://qiita.com/amasaki203][雨崎 しのぶ]] さんの『できるだけ全部ビルドするPLplotインストール【Linux編】』です。お楽しみにー

